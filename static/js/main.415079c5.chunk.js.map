{"version":3,"sources":["Recipe.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","media","height","paddingTop","ingContainer","display","alignItems","expand","transform","transition","didExpanded","Recipe","label","cal","image","ingredients","classes","useState","expanded","setExpanded","Card","CardHeader","title","subheader","Math","round","CardMedia","className","CardContent","Typography","variant","IconButton","onClick","aria-expanded","aria-label","Collapse","in","timeout","unmountOnExit","List","component","map","ing","index","ListItem","button","key","ListItemText","primary","root","background","overflow","minHeight","width","padding","borderBottomColor","grid","maxWidth","margin","form","textAlign","icon","position","top","marginRight","marginLeft","App","recipes","setRecipe","search","setSearch","query","setQuery","url","useEffect","getRecipe","a","fetch","response","json","data","hits","onSubmit","e","preventDefault","Input","type","placeholder","onChange","target","value","Button","Grid","container","justify","spacing","recipe","item","xs","sm","md","lg","calories","ingredientLines","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.415079c5.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    media: {\r\n        height: 0,\r\n        paddingTop: '56.25%'\r\n    },\r\n\r\n    ingContainer:{\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    \r\n    expand: {\r\n        transform: 'rotate(0)',\r\n        transition: 'all 0.4s ease'\r\n    },\r\n    didExpanded: {\r\n        transform: 'rotate(180deg)',\r\n        transition: 'all 0.4s ease'\r\n    }\r\n    \r\n});\r\n\r\n\r\nconst Recipe = ({label, cal, image, ingredients}) => {\r\n\r\n    const classes = useStyles();\r\n    const [expanded, setExpanded] = useState(false);\r\n\r\n    const handleExpanded = () => {\r\n        setExpanded(!expanded);\r\n    }\r\n\r\n    return(\r\n        \r\n        <Card>\r\n            <CardHeader title={label}  subheader={`Calories:  ${Math.round(cal)}`}  />\r\n            \r\n            <CardMedia image={image} title={label} className={classes.media}/>\r\n\r\n            <CardContent className={classes.ingContainer}>\r\n                \r\n                <Typography variant=\"body1\"> See Ingredients </Typography>\r\n                <IconButton \r\n                    className={ expanded ? classes.didExpanded : classes.expand}\r\n                    onClick={handleExpanded}\r\n                    aria-expanded={expanded}\r\n                    aria-label=\"show more\" >\r\n                    <ExpandMoreIcon />\r\n                </IconButton>\r\n\r\n            </CardContent>\r\n\r\n\r\n            <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n                <CardContent>\r\n                    <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n                        \r\n                        {ingredients.map((ing, index )=> (\r\n                            <ListItem button key={index}>\r\n                                    <ListItemText primary={ing} />\r\n                            </ListItem>\r\n                        ))}\r\n\r\n                    </List>\r\n                    \r\n                </CardContent>\r\n            </Collapse>\r\n\r\n        </Card>\r\n        \r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Recipe","import React, {useState, useEffect} from 'react';\nimport Recipe from './Recipe';\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Input from '@material-ui/core/Input';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Button from '@material-ui/core/Button';\n\n\nconst appID = '4c69f415';\nconst appKey = 'ee637c0ff7d282510c976320d94d7be0';\n\nconst useStyles = makeStyles({\n  root: {\n    background: 'linear-gradient(45deg, #FFDF8D , #FFEAD4 80%)',\n    overflow: 'auto',\n    minHeight: '100vh',\n    '& .MuiInputBase-input': {\n      width: '450px',\n      padding: '8px'\n    },\n    '& .MuiInput-underline:after': {\n      borderBottomColor: '#C39931',\n    }\n  },\n  grid: {\n    maxWidth: '100%',\n    padding: '15px',\n    margin: '0'\n  },\n  form: {\n    textAlign: 'center',\n    margin: '25px 0'\n  },\n  icon: {\n    position: 'relative',\n    top: '7px',\n    marginRight: '3px'\n  },\n  button: {\n    marginLeft: '10px'\n  }\n\n});\n\n\n\nfunction App() {\n  \n  const [recipes, setRecipe] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('chicken');\n\n  const url = `https://api.edamam.com/search?q=${query}&app_id=${appID}&app_key=${appKey}`;\n\n  useEffect(() => {\n    getRecipe();\n  }, [query]);\n\n\n  const classes = useStyles();\n\n\n  const getRecipe = async () => {\n    const response = await fetch(url);\n    const data = await response.json();\n    setRecipe(data.hits);\n  }\n\n  const searchSubmit = (e) => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  }\n\n\n  return (\n    <div className={classes.root}>\n      <form onSubmit={searchSubmit} className={classes.form}>\n        <SearchIcon className={classes.icon}/>\n        <Input \n          type=\"text\"\n          placeholder=\"Search recipe\"\n          onChange={e => setSearch(e.target.value)} \n          value={search} />\n        <Button type=\"submit\" variant=\"outlined\" className={classes.button}> Search</Button>\n      </form>\n      \n\n      <Grid container justify=\"center\" spacing={5} className={classes.grid}>\n\n          {recipes.map((recipe) => (\n            \n            <Grid item xs={12} sm={6} md={4} lg={3} key= {recipe.recipe.label}>\n              <Recipe \n                image= {recipe.recipe.image} \n                cal= {recipe.recipe.calories} \n                label= {recipe.recipe.label} \n                ingredients= {recipe.recipe.ingredientLines}  \n              />\n            </Grid>\n\n          ))}\n\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}